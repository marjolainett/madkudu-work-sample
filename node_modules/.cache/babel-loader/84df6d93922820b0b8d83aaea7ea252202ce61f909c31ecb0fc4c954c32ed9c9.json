{"ast":null,"code":"var _jsxFileName = \"/Users/marjolaine/madkudu-work-sample/src/components/Chart1.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RadarChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const africaHorns = {};\n        const asiaHorns = {};\n\n        // Count the occurrences of each horn type in Africa and Asia\n        data.forEach(({\n          continent,\n          horns\n        }) => {\n          const hornsObj = continent === 'Africa' ? africaHorns : asiaHorns;\n          hornsObj[horns] = (hornsObj[horns] || 0) + 1;\n        });\n\n        // Extract horn types and counts for Africa\n        const africaLabels = Object.keys(africaHorns);\n        const africaData = Object.values(africaHorns);\n\n        // Extract horn types and counts for Asia\n        const asiaLabels = Object.keys(asiaHorns);\n        const asiaData = Object.values(asiaHorns);\n        new Chart(ctx, {\n          type: 'radar',\n          data: {\n            labels: africaLabels,\n            // Use horn types as labels\n            datasets: [{\n              label: 'Africa',\n              data: africaData,\n              // Counts of horn types in Africa\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              // Customize colors as needed\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 1\n            }, {\n              label: 'Asia',\n              data: asiaData,\n              // Counts of horn types in Asia\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              // Customize colors as needed\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            scales: {\n              r: {\n                angleLines: {\n                  display: true\n                },\n                suggestedMin: 0\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(RadarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = RadarChart;\nexport default RadarChart;\nvar _c;\n$RefreshReg$(_c, \"RadarChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","RadarChart","data","_s","chartRef","current","ctx","getContext","africaHorns","asiaHorns","forEach","continent","horns","hornsObj","africaLabels","Object","keys","africaData","values","asiaLabels","asiaData","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","r","angleLines","display","suggestedMin","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marjolaine/madkudu-work-sample/src/components/Chart1.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst RadarChart = ({ data }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const africaHorns = {};\n        const asiaHorns = {};\n\n        // Count the occurrences of each horn type in Africa and Asia\n        data.forEach(({ continent, horns }) => {\n          const hornsObj = continent === 'Africa' ? africaHorns : asiaHorns;\n          hornsObj[horns] = (hornsObj[horns] || 0) + 1;\n        });\n\n        // Extract horn types and counts for Africa\n        const africaLabels = Object.keys(africaHorns);\n        const africaData = Object.values(africaHorns);\n\n        // Extract horn types and counts for Asia\n        const asiaLabels = Object.keys(asiaHorns);\n        const asiaData = Object.values(asiaHorns);\n\n        new Chart(ctx, {\n          type: 'radar',\n          data: {\n            labels: africaLabels, // Use horn types as labels\n            datasets: [\n              {\n                label: 'Africa',\n                data: africaData, // Counts of horn types in Africa\n                backgroundColor: 'rgba(255, 99, 132, 0.2)', // Customize colors as needed\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1,\n              },\n              {\n                label: 'Asia',\n                data: asiaData, // Counts of horn types in Asia\n                backgroundColor: 'rgba(54, 162, 235, 0.2)', // Customize colors as needed\n                borderColor: 'rgba(54, 162, 235, 1)',\n                borderWidth: 1,\n              },\n            ],\n          },\n          options: {\n            scales: {\n              r: {\n                angleLines: {\n                  display: true,\n                },\n                suggestedMin: 0,\n              },\n            },\n          },\n        });\n      }\n    }\n  }, [data]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default RadarChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;MAChC,MAAMC,GAAG,GAAGF,QAAQ,CAACC,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MAC7C,IAAID,GAAG,EAAE;QACP,MAAME,WAAW,GAAG,CAAC,CAAC;QACtB,MAAMC,SAAS,GAAG,CAAC,CAAC;;QAEpB;QACAP,IAAI,CAACQ,OAAO,CAAC,CAAC;UAAEC,SAAS;UAAEC;QAAM,CAAC,KAAK;UACrC,MAAMC,QAAQ,GAAGF,SAAS,KAAK,QAAQ,GAAGH,WAAW,GAAGC,SAAS;UACjEI,QAAQ,CAACD,KAAK,CAAC,GAAG,CAACC,QAAQ,CAACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9C,CAAC,CAAC;;QAEF;QACA,MAAME,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACR,WAAW,CAAC;QAC7C,MAAMS,UAAU,GAAGF,MAAM,CAACG,MAAM,CAACV,WAAW,CAAC;;QAE7C;QACA,MAAMW,UAAU,GAAGJ,MAAM,CAACC,IAAI,CAACP,SAAS,CAAC;QACzC,MAAMW,QAAQ,GAAGL,MAAM,CAACG,MAAM,CAACT,SAAS,CAAC;QAEzC,IAAIX,KAAK,CAACQ,GAAG,EAAE;UACbe,IAAI,EAAE,OAAO;UACbnB,IAAI,EAAE;YACJoB,MAAM,EAAER,YAAY;YAAE;YACtBS,QAAQ,EAAE,CACR;cACEC,KAAK,EAAE,QAAQ;cACftB,IAAI,EAAEe,UAAU;cAAE;cAClBQ,eAAe,EAAE,yBAAyB;cAAE;cAC5CC,WAAW,EAAE,uBAAuB;cACpCC,WAAW,EAAE;YACf,CAAC,EACD;cACEH,KAAK,EAAE,MAAM;cACbtB,IAAI,EAAEkB,QAAQ;cAAE;cAChBK,eAAe,EAAE,yBAAyB;cAAE;cAC5CC,WAAW,EAAE,uBAAuB;cACpCC,WAAW,EAAE;YACf,CAAC;UAEL,CAAC;UACDC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,UAAU,EAAE;kBACVC,OAAO,EAAE;gBACX,CAAC;gBACDC,YAAY,EAAE;cAChB;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,CAAC/B,IAAI,CAAC,CAAC;EAEV,oBAAOF,OAAA;IAAQkC,GAAG,EAAE9B;EAAS;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAACnC,EAAA,CA7DIF,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AA+DhB,eAAeA,UAAU;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}