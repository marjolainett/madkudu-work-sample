{"ast":null,"code":"var _jsxFileName = \"/Users/marjolaine/madkudu-work-sample/src/components/ScatterPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const config = {\n          type: 'scatter',\n          data: {\n            datasets: [{\n              label: 'Antelope Species',\n              data: data.map(({\n                weight,\n                height\n              }) => ({\n                x: weight,\n                y: height\n              })),\n              backgroundColor: 'rgba(75, 192, 192, 0.5)',\n              // Adjust the color and opacity as needed\n              borderColor: 'rgba(75, 192, 192, 1)' // Adjust the color as needed\n            }]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: 'Weight (kg)'\n                }\n              },\n              y: {\n                type: 'linear',\n                position: 'left',\n                title: {\n                  display: true,\n                  text: 'Height (cm)'\n                }\n              }\n            }\n          }\n        };\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n_s(ScatterPlot, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ScatterPlot","data","_s","chartRef","chartInstance","current","ctx","getContext","config","type","datasets","label","map","weight","height","x","y","backgroundColor","borderColor","options","scales","position","title","display","text","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marjolaine/madkudu-work-sample/src/components/ScatterPlot.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst ScatterPlot = ({ data }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const config = {\n          type: 'scatter',\n          data: {\n            datasets: [{\n              label: 'Antelope Species',\n              data: data.map(({ weight, height }) => ({ x: weight, y: height })),\n              backgroundColor: 'rgba(75, 192, 192, 0.5)', // Adjust the color and opacity as needed\n              borderColor: 'rgba(75, 192, 192, 1)', // Adjust the color as needed\n            }]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: 'Weight (kg)'\n                }\n              },\n              y: {\n                type: 'linear',\n                position: 'left',\n                title: {\n                  display: true,\n                  text: 'Height (cm)'\n                }\n              }\n            }\n          }\n        };\n\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default ScatterPlot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,aAAa,GAAGR,MAAM,CAAC,IAAI,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,IAAIA,QAAQ,CAACE,OAAO,EAAE;MAChC,MAAMC,GAAG,GAAGH,QAAQ,CAACE,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MAC7C,IAAID,GAAG,EAAE;QACP,MAAME,MAAM,GAAG;UACbC,IAAI,EAAE,SAAS;UACfR,IAAI,EAAE;YACJS,QAAQ,EAAE,CAAC;cACTC,KAAK,EAAE,kBAAkB;cACzBV,IAAI,EAAEA,IAAI,CAACW,GAAG,CAAC,CAAC;gBAAEC,MAAM;gBAAEC;cAAO,CAAC,MAAM;gBAAEC,CAAC,EAAEF,MAAM;gBAAEG,CAAC,EAAEF;cAAO,CAAC,CAAC,CAAC;cAClEG,eAAe,EAAE,yBAAyB;cAAE;cAC5CC,WAAW,EAAE,uBAAuB,CAAE;YACxC,CAAC;UACH,CAAC;UACDC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNL,CAAC,EAAE;gBACDN,IAAI,EAAE,QAAQ;gBACdY,QAAQ,EAAE,QAAQ;gBAClBC,KAAK,EAAE;kBACLC,OAAO,EAAE,IAAI;kBACbC,IAAI,EAAE;gBACR;cACF,CAAC;cACDR,CAAC,EAAE;gBACDP,IAAI,EAAE,QAAQ;gBACdY,QAAQ,EAAE,MAAM;gBAChBC,KAAK,EAAE;kBACLC,OAAO,EAAE,IAAI;kBACbC,IAAI,EAAE;gBACR;cACF;YACF;UACF;QACF,CAAC;QAED,IAAIpB,aAAa,CAACC,OAAO,EAAE;UACzBD,aAAa,CAACC,OAAO,CAACoB,OAAO,CAAC,CAAC;QACjC;QAEArB,aAAa,CAACC,OAAO,GAAG,IAAIR,KAAK,CAACS,GAAG,EAAEE,MAAM,CAAC;MAChD;IACF;IAEA,OAAO,MAAM;MACX,IAAIJ,aAAa,CAACC,OAAO,EAAE;QACzBD,aAAa,CAACC,OAAO,CAACoB,OAAO,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACxB,IAAI,CAAC,CAAC;EAEV,oBAAOF,OAAA;IAAQ2B,GAAG,EAAEvB;EAAS;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAAC5B,EAAA,CAxDIF,WAAW;AAAA+B,EAAA,GAAX/B,WAAW;AA0DjB,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}