{"ast":null,"code":"var _jsxFileName = \"/Users/marjolaine/madkudu-work-sample/src/components/ScatterPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const hornTypes = [...new Set(data.map(({\n          horns\n        }) => horns))];\n        const datasets = hornTypes.map(hornType => {\n          const filteredData = data.filter(species => species.horns === hornType);\n          return {\n            label: hornType,\n            data: filteredData.map(({\n              weight,\n              height\n            }) => ({\n              x: weight,\n              y: height\n            })),\n            backgroundColor: `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`,\n            borderColor: `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 1)`\n          };\n        });\n        const config = {\n          type: 'scatter',\n          data: {\n            datasets: datasets\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: 'Weight (kg)'\n                }\n              },\n              y: {\n                type: 'linear',\n                position: 'left',\n                title: {\n                  display: true,\n                  text: 'Height (cm)'\n                }\n              }\n            }\n          }\n        };\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n_s(ScatterPlot, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ScatterPlot","data","_s","chartRef","chartInstance","current","ctx","getContext","hornTypes","Set","map","horns","datasets","hornType","filteredData","filter","species","label","weight","height","x","y","backgroundColor","Math","floor","random","borderColor","config","type","options","scales","position","title","display","text","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marjolaine/madkudu-work-sample/src/components/ScatterPlot.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst ScatterPlot = ({ data }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const hornTypes = [...new Set(data.map(({ horns }) => horns))];\n        const datasets = hornTypes.map((hornType) => {\n          const filteredData = data.filter((species) => species.horns === hornType);\n          return {\n            label: hornType,\n            data: filteredData.map(({ weight, height }) => ({ x: weight, y: height })),\n            backgroundColor: `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`,\n            borderColor: `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 1)`,\n          };\n        });\n\n        const config = {\n          type: 'scatter',\n          data: {\n            datasets: datasets,\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                  display: true,\n                  text: 'Weight (kg)'\n                }\n              },\n              y: {\n                type: 'linear',\n                position: 'left',\n                title: {\n                  display: true,\n                  text: 'Height (cm)'\n                }\n              }\n            }\n          }\n        };\n\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default ScatterPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}