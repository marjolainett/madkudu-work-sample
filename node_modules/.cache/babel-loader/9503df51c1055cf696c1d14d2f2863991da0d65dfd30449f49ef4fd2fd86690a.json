{"ast":null,"code":"var _jsxFileName = \"/Users/marjolaine/antelopes-case-study/src/components/RadarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\n// for each country, get the number of antelopes for each horn type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst prepareDataForChart = antelopesData => {\n  const countsByCountryAndHornType = {};\n  antelopesData.forEach(({\n    continent,\n    horns\n  }) => {\n    const key = `${continent}_${horns}`;\n    if (!countsByCountryAndHornType[key]) {\n      countsByCountryAndHornType[key] = 1;\n    } else {\n      countsByCountryAndHornType[key]++;\n    }\n  });\n  const hornTypes = [...new Set(antelopesData.map(({\n    horns\n  }) => horns))];\n  const countries = [...new Set(antelopesData.map(({\n    continent\n  }) => continent))];\n  const datasets = countries.map(country => {\n    return {\n      label: country,\n      data: hornTypes.map(hornType => {\n        const key = `${country}_${hornType}`;\n        return countsByCountryAndHornType[key] || 0;\n      })\n    };\n  });\n  return {\n    labels: hornTypes,\n    datasets: datasets\n  };\n};\nconst RadarChart = ({\n  antelopesData\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const config = {\n          type: 'radar',\n          data: prepareDataForChart(antelopesData),\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Number of antelopes by country for each horn type'\n              }\n            }\n          }\n        };\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [antelopesData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s(RadarChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = RadarChart;\nexport default RadarChart;\nvar _c;\n$RefreshReg$(_c, \"RadarChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","prepareDataForChart","antelopesData","countsByCountryAndHornType","forEach","continent","horns","key","hornTypes","Set","map","countries","datasets","country","label","data","hornType","labels","RadarChart","_s","chartRef","chartInstance","current","ctx","getContext","config","type","options","responsive","plugins","title","display","text","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marjolaine/antelopes-case-study/src/components/RadarChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\n// for each country, get the number of antelopes for each horn type\nconst prepareDataForChart = (antelopesData) => {\n  const countsByCountryAndHornType = {};\n\n  antelopesData.forEach(({ continent, horns }) => {\n    const key = `${continent}_${horns}`;\n    if (!countsByCountryAndHornType[key]) {\n      countsByCountryAndHornType[key] = 1;\n    } else {\n      countsByCountryAndHornType[key]++;\n    }\n  });\n\n  const hornTypes = [...new Set(antelopesData.map(({ horns }) => horns))];\n  const countries = [...new Set(antelopesData.map(({ continent }) => continent))];\n\n  const datasets = countries.map((country) => {\n    return {\n      label: country,\n      data: hornTypes.map((hornType) => {\n        const key = `${country}_${hornType}`;\n        return countsByCountryAndHornType[key] || 0;\n      })\n    };\n  });\n\n  return {\n    labels: hornTypes,\n    datasets: datasets,\n  };\n};\n\nconst RadarChart = ({ antelopesData }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const config = {\n          type: 'radar',\n          data: prepareDataForChart(antelopesData),\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Number of antelopes by country for each horn type',\n              },\n            },\n          },\n        };\n\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [antelopesData]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default RadarChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}