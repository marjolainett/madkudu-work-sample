{"ast":null,"code":"var _jsxFileName = \"/Users/marjolaine/madkudu-work-sample/src/components/RadarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst prepareDataForChart = antelopeData => {\n  const countsByCountryAndHornType = {};\n  antelopeData.forEach(({\n    continent,\n    horns\n  }) => {\n    const key = `${continent}_${horns}`;\n    if (!countsByCountryAndHornType[key]) {\n      countsByCountryAndHornType[key] = 0;\n    }\n    countsByCountryAndHornType[key]++;\n  });\n  const hornTypes = [...new Set(antelopeData.map(({\n    horns\n  }) => horns))];\n  const countries = [...new Set(antelopeData.map(({\n    continent\n  }) => continent))];\n  const [borderColor, backgroundColor] = getRandomColor();\n  const datasets = countries.map(country => ({\n    label: country,\n    data: hornTypes.map(hornType => {\n      const key = `${country}_${hornType}`;\n      return countsByCountryAndHornType[key] || 0;\n    }),\n    borderColor: getRandomColor(),\n    backgroundColor: `$borderColor.slice(0, -2)}, 0.2)`\n  }));\n  return {\n    labels: hornTypes,\n    datasets: datasets\n  };\n};\nconst getRandomColor = () => {\n  const r = Math.floor(Math.random() * 256);\n  const g = Math.floor(Math.random() * 256);\n  const b = Math.floor(Math.random() * 256);\n  const color = `rgba(${r}, ${g}, ${b}, 1)`;\n  const backgroundColor = `rgba(${r}, ${g}, ${b}, 0.2)`;\n  return [color, backgroundColor];\n};\nconst RadarChart = ({\n  antelopeData\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const config = {\n          type: 'radar',\n          data: prepareDataForChart(antelopeData),\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Radar Chart'\n              }\n            }\n          }\n        };\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [antelopeData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n};\n_s(RadarChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = RadarChart;\nexport default RadarChart;\nvar _c;\n$RefreshReg$(_c, \"RadarChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","prepareDataForChart","antelopeData","countsByCountryAndHornType","forEach","continent","horns","key","hornTypes","Set","map","countries","borderColor","backgroundColor","getRandomColor","datasets","country","label","data","hornType","labels","r","Math","floor","random","g","b","color","RadarChart","_s","chartRef","chartInstance","current","ctx","getContext","config","type","options","responsive","plugins","title","display","text","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marjolaine/madkudu-work-sample/src/components/RadarChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst prepareDataForChart = (antelopeData) => {\n  const countsByCountryAndHornType = {};\n\n  antelopeData.forEach(({ continent, horns }) => {\n    const key = `${continent}_${horns}`;\n    if (!countsByCountryAndHornType[key]) {\n      countsByCountryAndHornType[key] = 0;\n    }\n    countsByCountryAndHornType[key]++;\n  });\n\n  const hornTypes = [...new Set(antelopeData.map(({ horns }) => horns))];\n  const countries = [...new Set(antelopeData.map(({ continent }) => continent))];\n  const [borderColor, backgroundColor] = getRandomColor();\n  \n  const datasets = countries.map((country) => ({\n    label: country,\n    data: hornTypes.map((hornType) => {\n      const key = `${country}_${hornType}`;\n      return countsByCountryAndHornType[key] || 0;\n    }),\n    borderColor: getRandomColor(),\n    backgroundColor: `$borderColor.slice(0, -2)}, 0.2)`,\n  }));\n\n  return {\n    labels: hornTypes,\n    datasets: datasets,\n  };\n};\n\nconst getRandomColor = () => {\n  const r = Math.floor(Math.random() * 256);\n  const g = Math.floor(Math.random() * 256);\n  const b = Math.floor(Math.random() * 256);\n  const color = `rgba(${r}, ${g}, ${b}, 1)`;\n  const backgroundColor = `rgba(${r}, ${g}, ${b}, 0.2)`;\n  return [color, backgroundColor];\n};\n\nconst RadarChart = ({ antelopeData }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        const config = {\n          type: 'radar',\n          data: prepareDataForChart(antelopeData),\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Radar Chart',\n              },\n            },\n          },\n        };\n\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n\n        chartInstance.current = new Chart(ctx, config);\n      }\n    }\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [antelopeData]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default RadarChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}